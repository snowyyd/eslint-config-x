import stylistic from '@stylistic/eslint-plugin';
import { builtinRules } from 'eslint/use-at-your-own-risk';
import rulesTypeList from '../../node_modules/eslint/conf/rule-type-list.json' with { type: 'json' };
import type { ConfigTemplate } from './types.ts';

export const legacyRules = Object.keys(stylistic.configs['disable-legacy'].rules ?? {});
export const removedRules = rulesTypeList.removed.map((x) => x.removed);
export const deprecatedRules = [
	...[...builtinRules.entries()]
		// eslint-disable-next-line @typescript-eslint/no-unused-vars
		.filter(([_, rule]) => rule.meta?.deprecated)
		.map(([name]) => name),
	...rulesTypeList.deprecated,
];

export function genTSConfig(config: ConfigTemplate): string
{
	const genComments = (comments?: string | string[]) =>
	{
		if (!comments) return undefined;

		return Array.isArray(comments)
			? comments.map((c) => `\t\t// ${c}`).join('\n')
			: `\t\t// ${comments}`;
	};

	const ruleLines = config.rules?.map((rule) =>
	{
		const entryAsString = typeof rule.entry === 'string'
			? `'${rule.entry}'`
			: JSON.stringify(rule.entry);

		const ruleLine = `\t\t'${rule.name}': ${entryAsString},`;

		return rule.comments
			? [genComments(rule.comments), ruleLine].join('\n')
			: ruleLine;
	});

	return `// THIS FILE WAS AUTOGENERATED
import type { FlatConfig } from '@typescript-eslint/utils/ts-eslint';

export default {
	name: '${config.name}',
	rules: {
${ruleLines?.join('\n\n')}
	},
} satisfies FlatConfig.Config;
`;
}

export function genTSConfig2(config: ConfigTemplate): string
{
	const ruleLines = Object.fromEntries(config.rules!.map(({ name, entry }) => [name, entry]));

	return `// THIS FILE WAS AUTOGENERATED
import type { FlatConfig } from '@typescript-eslint/utils/ts-eslint';

export default {
	name: '${config.name}',
	rules: ${JSON.stringify(ruleLines, null, 4)},
} satisfies FlatConfig.Config;
`;
}
